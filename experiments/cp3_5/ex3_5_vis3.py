import numpy as np
import main.utils as utils
import matplotlib.pyplot as plt
from scipy.io import loadmat
import cv2
import os
from random import sample
import pickle

# ---------------------------- info ----------------------------------
# another visualization for image retrivel
# need 1. database和query path  2. xxx.npz(which contains similarity matrix)
# 3. optimal path file generated by SMCNTF pathid.pkl
# 4. S generated by SeqSLAM xxx.mat
# commented (*) means you need to specify your customized param
# in paper, pairwise、MCN、SeqSLAM、SMCN and SMCNTF five methods is shown.
# -------------------------------------------------------------------

# dataset root dir
root = 'E:/project/scut/graduation/datasets/nordland/'   #(*)
# load xxx.npz
S_file = './vis3/nd_sumwin.npz'     #(*)
S = np.load(S_file)
S_pw = S['S_pw']
S_mcn = S['S_mcn']
# use SeqSLAM2.0 toolbox from matlab, the similarity matrix has much nan value
S_seq = loadmat('../cp3_4/seqslam/nd_sumwin.mat')['S']    #(*)
tmp = np.isnan(S_seq)
S_seq[tmp] = np.max(S_seq[~tmp])
S_smcn = S['S_smcn']
S_smcntf = S['S_smcntf']

dbfile = 'summer/'     #(*)    database file
qfile = 'winter/'     #(*)    query file
dbn = len(os.listdir(root + dbfile))
qn = len(os.listdir(root + qfile))
qn = min(dbn, qn)

# pick a reference img
if root.endswith('scut/'):
    # if use scut dataset
    qn = qn // 4

numTopick = sample(range(0, qn), 1)[0]

topPicToShow = 10   #(*)
img_format = '%d.png'   #(*)
# name as <dataset name>.png
saveName = './vis3/' + root.split('/')[-2] + '.png'   #(*)
ref_saveName = './vis3/ref_' + root.split('/')[-2] + '.png'    #(*)

# err tolerance
green_tolerance = 9     #(*)
blue_tolerance = 2 * green_tolerance      #(*)

# load groundtruth
# if not the oxford robotcar dataset(or if not use gps as groundtruth)
# uncomment following code
gtg = utils.getGroundTruthMatrix(qn, green_tolerance)
gtb = utils.getGroundTruthMatrix(qn, blue_tolerance)

gtlg = list(np.where(gtg[:, numTopick])[0])
gtlb = list(np.where(gtb[:, numTopick])[0])

# otherwise uncomment following code
# r = '../../datasets/oxford_robotcar/'
# db_gps = np.load(r + 'gps_snow.npy')
# q_gps = np.load(r + 'gps_night.npy')
# _, gtg = utils.getGpsGT(db_gps, q_gps, green_tolerance)
# _, gtb = utils.getGpsGT(db_gps, q_gps, blue_tolerance)

# color
blue = np.array([[[255, 0, 0]]])
green = np.array([[[0, 255, 0]]])
red = np.array([[[0, 0, 255]]])

id_pw = np.argsort(-S_pw[:, numTopick])[:topPicToShow]
id_mcn = np.argsort(-S_mcn[:, numTopick])[:topPicToShow]
id_smcn = np.argsort(-S_smcn[:, numTopick])[:topPicToShow]
id_smcntf = np.argsort(S_smcntf[:, numTopick])[:topPicToShow]
id_seq = np.argsort(S_seq[:, numTopick])[:topPicToShow]

real_id_pw = np.copy(id_pw)
real_id_mcn = np.copy(id_mcn)
real_id_smcn = np.copy(id_smcn)
real_id_smcntf = np.copy(id_smcntf)
real_id_seq = np.copy(id_seq)
if root.endswith('scut/'):
    real_id_pw *= 4
    real_id_mcn *= 4
    real_id_smcn *= 4
    real_id_smcntf *= 4
    real_id_seq *= 4

numMethods = 5      #(*)    how many methords to show

# 一下代码一般不需要配置
# --------------------------draw--------------------------------
pad = 7
img_size = 120
visImg = 255 * np.ones(((numMethods)*(img_size+2*pad), topPicToShow*(img_size + 2*pad), 3), dtype=np.uint8)

vboard = 0
hboard = 0
for i in range(topPicToShow):
    img = cv2.imread(root + qfile + img_format % real_id_pw[i])
    img = cv2.resize(img, (img_size, img_size))
    if id_pw[i] in gtlg:
        color = green
    elif id_pw[i] in gtlb:
        color = blue
    else:
        color = red

    visImg[vboard:vboard + 2 * pad + img_size,
        hboard:hboard + 2 * pad + img_size, :] = color
    visImg[vboard + pad:vboard + pad + img_size,
        hboard + pad:hboard + pad + img_size:] = img
    hboard += (2*pad+img_size)

vboard += (2*pad + img_size)

hboard = 0
for i in range(topPicToShow):
    img = cv2.imread(root + qfile + img_format % real_id_seq[i])
    img = cv2.resize(img, (img_size, img_size))
    if id_seq[i] in gtlg:
        color = green
    elif id_seq[i] in gtlb:
        color = blue
    else:
        color = red

    visImg[vboard:vboard + 2 * pad + img_size,
    hboard:hboard + 2 * pad + img_size, :] = color
    visImg[vboard + pad:vboard + pad + img_size,
    hboard + pad:hboard + pad + img_size:] = img
    hboard += (2 * pad + img_size)

vboard += (2*pad + img_size)

hboard = 0
for i in range(topPicToShow):
    img = cv2.imread(root + qfile + img_format % real_id_mcn[i])
    img = cv2.resize(img, (img_size, img_size))
    if id_mcn[i] in gtlg:
        color = green
    elif id_mcn[i] in gtlb:
        color = blue
    else:
        color = red

    visImg[vboard:vboard + 2 * pad + img_size,
    hboard:hboard + 2 * pad + img_size, :] = color
    visImg[vboard + pad:vboard + pad + img_size,
    hboard + pad:hboard + pad + img_size:] = img
    hboard += (2 * pad + img_size)

vboard += (2*pad + img_size)

hboard = 0
for i in range(topPicToShow):
    img = cv2.imread(root + qfile + img_format % real_id_smcn[i])
    img = cv2.resize(img, (img_size, img_size))
    if id_smcn[i] in gtlg:
        color = green
    elif id_smcn[i] in gtlb:
        color = blue
    else:
        color = red

    visImg[vboard:vboard + 2 * pad + img_size,
    hboard:hboard + 2 * pad + img_size, :] = color
    visImg[vboard + pad:vboard + pad + img_size,
    hboard + pad:hboard + pad + img_size:] = img
    hboard += (2 * pad + img_size)

vboard += (2*pad + img_size)

hboard = 0
for i in range(topPicToShow):
    img = cv2.imread(root + qfile + img_format % real_id_smcntf[i])
    img = cv2.resize(img, (img_size, img_size))
    if id_smcntf[i] in gtlg:
        color = green
    elif id_smcntf[i] in gtlb:
        color = blue
    else:
        color = red

    visImg[vboard:vboard + 2 * pad + img_size,
    hboard:hboard + 2 * pad + img_size, :] = color
    visImg[vboard + pad:vboard + pad + img_size,
    hboard + pad:hboard + pad + img_size:] = img
    hboard += (2 * pad + img_size)

vboard += (2*pad + img_size)

if root.endswith('scut/'):
    numTopick *= 4
ref_img = cv2.imread(root + qfile + img_format % numTopick)
cv2.imshow('ref', ref_img)
cv2.imshow('res', visImg)
cv2.waitKey()
cv2.destroyAllWindows()

cv2.imwrite(ref_saveName, ref_img)
cv2.imwrite(saveName, visImg)